{"version":3,"sources":["main.js"],"names":["observer","IntersectionObserver","entries","forEach","entry","isIntersecting","target","classList","add","remove","blob","document","getElementById","hiddenElements","querySelectorAll","el","observe","onpointermove","event","animate","left","pageX","top","pageY","duration","fill"],"mappings":";AAIA,IAAMA,EAAW,IAAIC,qBAAqB,SAACC,GACzCA,EAAQC,QAAQ,SAACC,GAEXA,EAAMC,eACRD,EAAME,OAAOC,UAAUC,IAAI,QAE3BJ,EAAME,OAAOC,UAAUE,OAAO,YAM9BC,EAAOC,SAASC,eAAe,SAG/BC,EAAiBF,SAASG,iBAAiB,WACjDD,EAAeV,QAAQ,SAACY,GAAE,OAAKf,EAASgB,QAAQD,KAEhDJ,SAASM,cAAgB,SAAAC,GACvBR,EAAKS,QAAQ,CACXC,KAASF,GAAAA,OAAAA,EAAMG,MAAS,MACxBC,IAAQJ,GAAAA,OAAAA,EAAMK,MAAK,OAClB,CAAEC,SAAU,IAAMC,KAAM","file":"main.9ec2171c.js","sourceRoot":"..\\src","sourcesContent":["//Intersection observer observes any components that are currently visible to the user/on screen.\r\n//When these components come into view, .show is added to that components class, which triggers a CSS animation,\r\n//Which can be viewed in /styling/style.scss.\r\n\r\nconst observer = new IntersectionObserver((entries) => {\r\n  entries.forEach((entry) => {\r\n\r\n    if (entry.isIntersecting) {\r\n      entry.target.classList.add(\"show\");\r\n    } else {\r\n      entry.target.classList.remove(\"show\");\r\n    }\r\n  });\r\n});\r\n\r\n\r\nconst blob = document.getElementById(\"block\");\r\n\r\n//Gets all elements with the .hidden class to pass into the intersection observer.\r\nconst hiddenElements = document.querySelectorAll(\".hidden\");\r\nhiddenElements.forEach((el) => observer.observe(el));\r\n\r\ndocument.onpointermove = event => {\r\n  blob.animate({\r\n    left: `${event.pageX}px`,\r\n    top: `${event.pageY}px`\r\n  }, { duration: 3000, fill: \"forwards\"})\r\n}"]}